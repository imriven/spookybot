import { __awaiter, __generator, __values } from "tslib";
import { ResponseBasedRateLimiter } from "./ResponseBasedRateLimiter.mjs";
var PartitionedRateLimiter = /** @class */ (function () {
    function PartitionedRateLimiter(options) {
        this._children = new Map();
        this._paused = false;
        this._partitionKeyCallback = options.getPartitionKey;
        this._createChildCallback = options.createChild;
    }
    PartitionedRateLimiter.prototype.request = function (req, options) {
        return __awaiter(this, void 0, Promise, function () {
            var partitionKey, partitionChild;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        partitionKey = this._partitionKeyCallback(req);
                        partitionChild = this._getChild(partitionKey);
                        return [4 /*yield*/, partitionChild.request(req, options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PartitionedRateLimiter.prototype.clear = function () {
        var e_1, _a;
        try {
            for (var _b = __values(this._children.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                child.clear();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    PartitionedRateLimiter.prototype.pause = function () {
        var e_2, _a;
        this._paused = true;
        try {
            for (var _b = __values(this._children.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                child.pause();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    PartitionedRateLimiter.prototype.resume = function () {
        var e_3, _a;
        this._paused = false;
        try {
            for (var _b = __values(this._children.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                child.resume();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    PartitionedRateLimiter.prototype.getChildStats = function (partitionKey) {
        if (!this._children.has(partitionKey)) {
            return null;
        }
        var child = this._children.get(partitionKey);
        if (!(child instanceof ResponseBasedRateLimiter)) {
            return null;
        }
        return child.stats;
    };
    PartitionedRateLimiter.prototype._getChild = function (partitionKey) {
        if (this._children.has(partitionKey)) {
            return this._children.get(partitionKey);
        }
        var result = this._createChildCallback(partitionKey);
        if (this._paused) {
            result.pause();
        }
        this._children.set(partitionKey, result);
        return result;
    };
    return PartitionedRateLimiter;
}());
export { PartitionedRateLimiter };
