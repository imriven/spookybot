"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientCredentialsAuthProvider = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
const AccessToken_1 = require("../AccessToken");
const helpers_1 = require("../helpers");
const BaseAuthProvider_1 = require("./BaseAuthProvider");
/**
 * An auth provider that retrieve tokens using client credentials.
 */
let ClientCredentialsAuthProvider = class ClientCredentialsAuthProvider extends BaseAuthProvider_1.BaseAuthProvider {
    /**
     * Creates a new auth provider to receive an application token with using the client ID and secret.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     * @param impliedScopes The scopes that are implied for your application,
     * for example an extension that is allowed to access subscriptions.
     */
    constructor(clientId, clientSecret, impliedScopes = []) {
        super();
        /**
         * The type of tokens the provider generates.
         *
         * This auth provider generates app tokens.
         */
        this.tokenType = 'app';
        this._clientId = clientId;
        this._clientSecret = clientSecret;
        this._impliedScopes = impliedScopes;
    }
    /**
     * Retrieves a new app access token.
     */
    async refresh() {
        return (this._token = await (0, helpers_1.getAppToken)(this._clientId, this._clientSecret));
    }
    /**
     * The client ID.
     */
    get clientId() {
        return this._clientId;
    }
    /**
     * The scopes that are currently available using the access token.
     */
    get currentScopes() {
        return [];
    }
    /**
     * Retrieves an access token.
     *
     * If any scopes are provided, this throws. The client credentials flow does not support scopes.
     *
     * @param scopes The requested scopes.
     */
    async _doGetAccessToken(scopes) {
        if (scopes && scopes.length > 0) {
            if (this._impliedScopes.length) {
                if (scopes.some(scope => !this._impliedScopes.includes(scope))) {
                    throw new Error(`Scope ${scopes.join(', ')} requested but only the scope ${this._impliedScopes.join(', ')} is implied`);
                }
            }
            else {
                throw new Error(`Scope ${scopes.join(', ')} requested but the client credentials flow does not support scopes`);
            }
        }
        if (!this._token || (0, AccessToken_1.accessTokenIsExpired)(this._token)) {
            return await this.refresh();
        }
        return this._token;
    }
};
tslib_1.__decorate([
    (0, shared_utils_1.Enumerable)(false)
], ClientCredentialsAuthProvider.prototype, "_clientSecret", void 0);
tslib_1.__decorate([
    (0, shared_utils_1.Enumerable)(false)
], ClientCredentialsAuthProvider.prototype, "_token", void 0);
ClientCredentialsAuthProvider = tslib_1.__decorate([
    (0, common_1.rtfm)('auth', 'ClientCredentialsAuthProvider', 'clientId')
], ClientCredentialsAuthProvider);
exports.ClientCredentialsAuthProvider = ClientCredentialsAuthProvider;
