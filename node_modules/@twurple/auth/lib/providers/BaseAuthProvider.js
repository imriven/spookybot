"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAuthProvider = void 0;
class BaseAuthProvider {
    constructor() {
        this._newTokenScopes = new Set();
        this._newTokenPromise = null;
        this._queuedScopes = new Set();
        this._queueExecutor = null;
        this._queuePromise = null;
    }
    async getAccessToken(scopes) {
        var _a;
        if (this._newTokenPromise) {
            if (!scopes || scopes.every(scope => this._newTokenScopes.has(scope))) {
                return await this._newTokenPromise;
            }
            if (this._queueExecutor) {
                for (const scope of scopes) {
                    this._queuedScopes.add(scope);
                }
            }
            else {
                this._queuedScopes = new Set(scopes);
            }
            (_a = this._queuePromise) !== null && _a !== void 0 ? _a : (this._queuePromise = new Promise((resolve, reject) => {
                this._queueExecutor = async () => {
                    var _a;
                    if (!this._queuePromise) {
                        return;
                    }
                    this._newTokenScopes = this._queuedScopes;
                    this._queuedScopes = new Set();
                    this._newTokenPromise = this._queuePromise;
                    this._queuePromise = null;
                    this._queueExecutor = null;
                    try {
                        resolve(await this._doGetAccessToken(Array.from(this._newTokenScopes)));
                    }
                    catch (e) {
                        reject(e);
                    }
                    finally {
                        this._newTokenPromise = null;
                        this._newTokenScopes = new Set();
                        (_a = this._queueExecutor) === null || _a === void 0 ? void 0 : _a.call(this);
                    }
                };
            }));
            return await this._queuePromise;
        }
        this._newTokenScopes = new Set(scopes !== null && scopes !== void 0 ? scopes : []);
        this._newTokenPromise = new Promise(async (resolve, reject) => {
            var _a;
            try {
                const scopesToFetch = Array.from(this._newTokenScopes);
                resolve(await this._doGetAccessToken(scopesToFetch));
            }
            catch (e) {
                reject(e);
            }
            finally {
                this._newTokenPromise = null;
                this._newTokenScopes = new Set();
                (_a = this._queueExecutor) === null || _a === void 0 ? void 0 : _a.call(this);
            }
        });
        return await this._newTokenPromise;
    }
}
exports.BaseAuthProvider = BaseAuthProvider;
