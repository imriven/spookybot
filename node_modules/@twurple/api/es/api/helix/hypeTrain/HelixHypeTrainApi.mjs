import { createBroadcasterQuery } from '@twurple/api-call';
import { BaseApi } from "../../BaseApi.mjs";
import { HelixPaginatedRequest } from "../HelixPaginatedRequest.mjs";
import { createPaginatedResult } from "../HelixPaginatedResult.mjs";
import { createPaginationQuery } from "../HelixPagination.mjs";
import { HelixHypeTrainEvent } from "./HelixHypeTrainEvent.mjs";
/**
 * The Helix API methods that deal with Hype Trains.
 *
 * Can be accessed using `client.hypeTrain` on an {@link ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const { data: events } = await api.hypeTrain.getHypeTrainEventsForBroadcaster('125328655');
 * ```
 *
 * @meta category helix
 * @meta categorizedTitle Hype Trains
 */
export class HelixHypeTrainApi extends BaseApi {
    /**
     * Retrieves the events of the current or latest Hype Train for the specified broadcaster.
     *
     * @param broadcaster The broadcaster to fetch Hype Train events for.
     * @param pagination
     *
     * @expandParams
     */
    async getHypeTrainEventsForBroadcaster(broadcaster, pagination) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'hypetrain/events',
            scope: 'channel:read:hype_train',
            query: {
                ...createBroadcasterQuery(broadcaster),
                ...createPaginationQuery(pagination)
            }
        });
        return createPaginatedResult(result, HelixHypeTrainEvent, this._client);
    }
    /**
     * Creates a paginator for the events of the current or latest Hype Train for the specified broadcaster.
     *
     * @param broadcaster The broadcaster to fetch Hype Train events for.
     */
    getHypeTrainEventsForBroadcasterPaginated(broadcaster) {
        return new HelixPaginatedRequest({
            url: 'hypetrain/events',
            scope: 'channel:read:hype_train',
            query: createBroadcasterQuery(broadcaster)
        }, this._client, (data) => new HelixHypeTrainEvent(data, this._client));
    }
}
