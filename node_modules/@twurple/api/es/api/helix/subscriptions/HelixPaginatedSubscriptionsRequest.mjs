import { __decorate } from "tslib";
import { rtfm } from '@twurple/common';
import { HelixPaginatedRequestWithTotal } from "../HelixPaginatedRequestWithTotal.mjs";
import { HelixSubscription } from "./HelixSubscription.mjs";
/**
 * A special case of {@link HelixPaginatedRequestWithTotal}
 * with support for fetching the total sub points of a broadcaster.
 *
 * @inheritDoc
 */
let HelixPaginatedSubscriptionsRequest = class HelixPaginatedSubscriptionsRequest extends HelixPaginatedRequestWithTotal {
    /** @private */
    constructor(query, client) {
        super({
            url: 'subscriptions',
            scope: 'channel:read:subscriptions',
            query
        }, client, data => new HelixSubscription(data, client));
    }
    /**
     * Retrieves and returns the total sub points of the broadcaster.
     */
    async getPoints() {
        var _a;
        const data = (_a = this._currentData) !== null && _a !== void 0 ? _a : (await this._fetchData({ query: { after: undefined } }));
        return data.points;
    }
};
HelixPaginatedSubscriptionsRequest = __decorate([
    rtfm('api', 'HelixPaginatedSubscriptionsRequest')
], HelixPaginatedSubscriptionsRequest);
export { HelixPaginatedSubscriptionsRequest };
