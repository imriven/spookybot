import { __decorate } from "tslib";
import { createBroadcasterQuery } from '@twurple/api-call';
import { extractUserId, rtfm } from '@twurple/common';
import { createChannelCommercialBody, createChannelUpdateBody, createChannelVipUpdateQuery } from "../../../interfaces/helix/channel.external.mjs";
import { createChannelUsersCheckQuery, createSingleKeyQuery } from "../../../interfaces/helix/generic.external.mjs";
import { BaseApi } from "../../BaseApi.mjs";
import { HelixPaginatedRequest } from "../HelixPaginatedRequest.mjs";
import { createPaginatedResult } from "../HelixPaginatedResult.mjs";
import { createPaginationQuery } from "../HelixPagination.mjs";
import { HelixUserRelation } from "../relations/HelixUserRelation.mjs";
import { HelixChannel } from "./HelixChannel.mjs";
import { HelixChannelEditor } from "./HelixChannelEditor.mjs";
/**
 * The Helix API methods that deal with channels.
 *
 * Can be accessed using `client.channels` on an {@link ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const channel = await api.channels.getChannelInfoById('125328655');
 * ```
 *
 * @meta category helix
 * @meta categorizedTitle Channels
 */
let HelixChannelApi = class HelixChannelApi extends BaseApi {
    /**
     * Retrieves the channel data for the given user.
     *
     * @param user The user you want to get channel info for.
     */
    async getChannelInfoById(user) {
        var _a;
        const channels = await this.getChannelInfoByIds([user]);
        return (_a = channels[0]) !== null && _a !== void 0 ? _a : null;
    }
    /**
     * Retrieves the channel data for the given users.
     *
     * @param users The users you want to get channel info for.
     */
    async getChannelInfoByIds(users) {
        const userIds = users.map(extractUserId);
        const result = await this._client.callApi({
            type: 'helix',
            url: 'channels',
            query: createSingleKeyQuery('broadcaster_id', userIds)
        });
        return result.data.map(data => new HelixChannel(data, this._client));
    }
    /**
     * Retrieves the channel data for the given user.
     *
     * @param user The user you want to get channel info for.
     *
     * @deprecated Use `getChannelInfoById` instead.
     */
    async getChannelInfo(user) {
        return await this.getChannelInfoById(user);
    }
    /**
     * Updates the given user's channel data.
     *
     * @param user The user you want to update channel info for.
     * @param data The channel info to set.
     */
    async updateChannelInfo(user, data) {
        await this._client.callApi({
            type: 'helix',
            url: 'channels',
            method: 'PATCH',
            scope: 'channel:manage:broadcast',
            query: createBroadcasterQuery(user),
            jsonBody: createChannelUpdateBody(data)
        });
    }
    /**
     * Starts a commercial on a channel.
     *
     * @param broadcaster The broadcaster on whose channel the commercial is started.
     * @param length The length of the commercial, in seconds.
     */
    async startChannelCommercial(broadcaster, length) {
        await this._client.callApi({
            type: 'helix',
            url: 'channels/commercial',
            method: 'POST',
            scope: 'channel:edit:commercial',
            jsonBody: createChannelCommercialBody(broadcaster, length)
        });
    }
    /**
     * Retrieves a list of users who have editor permissions on your channel.
     *
     * @param broadcaster The broadcaster to retreive the editors for.
     */
    async getChannelEditors(broadcaster) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'channels/editors',
            scope: 'channel:read:editors',
            query: createBroadcasterQuery(broadcaster)
        });
        return result.data.map(data => new HelixChannelEditor(data, this._client));
    }
    /**
     * Retrieves a list of VIPs in a channel.
     *
     * @param broadcaster The owner of the channel to get VIPs for.
     * @param pagination
     *
     * @expandParams
     */
    async getVips(broadcaster, pagination) {
        const response = await this._client.callApi({
            type: 'helix',
            url: 'channels/vips',
            scope: 'channel:read:vips',
            query: {
                ...createBroadcasterQuery(broadcaster),
                ...createPaginationQuery(pagination)
            }
        });
        return createPaginatedResult(response, HelixUserRelation, this._client);
    }
    /**
     * Creates a paginator for VIPs in a channel.
     *
     * @param broadcaster The owner of the channel to get VIPs for.
     */
    getVipsPaginated(broadcaster) {
        return new HelixPaginatedRequest({
            url: 'channels/vips',
            scope: 'channel:read:vips',
            query: createBroadcasterQuery(broadcaster)
        }, this._client, data => new HelixUserRelation(data, this._client));
    }
    /**
     * Checks the VIP status of a list of users in a channel.
     *
     * @param broadcaster The owner of the channel to check VIP status in.
     * @param users The users to check.
     */
    async checkVipForUsers(broadcaster, users) {
        const response = await this._client.callApi({
            type: 'helix',
            url: 'channels/vips',
            scope: 'channel:read:vips',
            query: createChannelUsersCheckQuery(broadcaster, users)
        });
        return response.data.map(data => new HelixUserRelation(data, this._client));
    }
    /**
     * Checks the VIP status of a user in a channel.
     *
     * @param broadcaster The owner of the channel to check VIP status in.
     * @param user The user to check.
     */
    async checkVipForUser(broadcaster, user) {
        const userId = extractUserId(user);
        const result = await this.checkVipForUsers(broadcaster, [userId]);
        return result.some(rel => rel.id === userId);
    }
    /**
     * Adds a VIP to the broadcaster’s chat room.
     *
     * @param broadcaster The broadcaster that’s granting VIP status to the user. This ID must match the user ID in the access token.
     * @param user The user to add as a VIP in the broadcaster’s chat room.
     */
    async addVip(broadcaster, user) {
        await this._client.callApi({
            type: 'helix',
            url: 'channels/vips',
            method: 'POST',
            scope: 'channel:manage:vips',
            query: createChannelVipUpdateQuery(broadcaster, user)
        });
    }
    /**
     * Removes a VIP from the broadcaster’s chat room.
     *
     * @param broadcaster The broadcaster that’s removing VIP status from the user. This ID must match the user ID in the access token.
     * @param user The user to remove as a VIP from the broadcaster’s chat room.
     */
    async removeVip(broadcaster, user) {
        await this._client.callApi({
            type: 'helix',
            url: 'channels/vips',
            method: 'DELETE',
            scope: 'channel:manage:vips',
            query: createChannelVipUpdateQuery(broadcaster, user)
        });
    }
};
HelixChannelApi = __decorate([
    rtfm('api', 'HelixChannelApi')
], HelixChannelApi);
export { HelixChannelApi };
