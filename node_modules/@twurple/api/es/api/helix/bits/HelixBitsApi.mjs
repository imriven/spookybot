import { __decorate } from "tslib";
import { mapOptional } from '@d-fischer/shared-utils';
import { createBroadcasterQuery } from '@twurple/api-call';
import { rtfm } from '@twurple/common';
import { createBitsLeaderboardQuery } from "../../../interfaces/helix/bits.external.mjs";
import { BaseApi } from "../../BaseApi.mjs";
import { HelixBitsLeaderboard } from "./HelixBitsLeaderboard.mjs";
import { HelixCheermoteList } from "./HelixCheermoteList.mjs";
/**
 * The Helix API methods that deal with bits.
 *
 * Can be accessed using `client.bits` on an {@link ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const leaderboard = await api.bits.getLeaderboard({ period: 'day' });
 * ```
 *
 * @meta category helix
 * @meta categorizedTitle Bits
 */
let HelixBitsApi = class HelixBitsApi extends BaseApi {
    /**
     * Retrieves a bits leaderboard of your channel.
     *
     * @param params
     * @expandParams
     */
    async getLeaderboard(params = {}) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'bits/leaderboard',
            scope: 'bits:read',
            query: createBitsLeaderboardQuery(params)
        });
        return new HelixBitsLeaderboard(result, this._client);
    }
    /**
     * Retrieves all available cheermotes.
     *
     * @param broadcaster The broadcaster to include custom cheermotes of.
     *
     * If not given, only retrieves global cheermotes.
     */
    async getCheermotes(broadcaster) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'bits/cheermotes',
            query: mapOptional(broadcaster, createBroadcasterQuery)
        });
        return new HelixCheermoteList(result.data);
    }
};
HelixBitsApi = __decorate([
    rtfm('api', 'HelixBitsApi')
], HelixBitsApi);
export { HelixBitsApi };
