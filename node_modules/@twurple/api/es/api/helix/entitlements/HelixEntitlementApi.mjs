import { __decorate } from "tslib";
import { mapOptional } from '@d-fischer/shared-utils';
import { extractUserId, rtfm } from '@twurple/common';
import { createDropsEntitlementQuery, createDropsEntitlementUpdateBody } from "../../../interfaces/helix/entitlement.external.mjs";
import { BaseApi } from "../../BaseApi.mjs";
import { HelixPaginatedRequest } from "../HelixPaginatedRequest.mjs";
import { createPaginatedResult } from "../HelixPaginatedResult.mjs";
import { createPaginationQuery } from "../HelixPagination.mjs";
import { HelixDropsEntitlement } from "./HelixDropsEntitlement.mjs";
/**
 * The Helix API methods that deal with entitlements (drops).
 *
 * Can be accessed using `client.entitlements` on an {@link ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient({ authProvider });
 * const clipId = await api.entitlements.getDropsEntitlements();
 * ```
 *
 * @beta
 *
 * @meta category helix
 * @meta categorizedTitle Entitlements (Drops)
 */
let HelixEntitlementApi = class HelixEntitlementApi extends BaseApi {
    /**
     * Gets the drops entitlements for the given filter.
     *
     * @beta
     * @expandParams
     *
     * @param filter
     * @param alwaysApp Whether an app token should always be used, even if a user filter is given.
     */
    async getDropsEntitlements(filter, alwaysApp = false) {
        const response = await this._client.callApi({
            type: 'helix',
            url: 'entitlements/drops',
            userId: mapOptional(filter.user, extractUserId),
            forceType: filter.user && alwaysApp ? 'app' : undefined,
            query: {
                ...createDropsEntitlementQuery(filter, alwaysApp),
                ...createPaginationQuery(filter)
            }
        });
        return createPaginatedResult(response, HelixDropsEntitlement, this._client);
    }
    /**
     * Creates a paginator for drops entitlements for the given filter.
     *
     * @beta
     * @expandParams
     *
     * @param filter
     * @param alwaysApp Whether an app token should always be used, even if a user filter is given.
     */
    getDropsEntitlementsPaginated(filter, alwaysApp = false) {
        return new HelixPaginatedRequest({
            url: 'entitlements/drops',
            userId: mapOptional(filter.user, extractUserId),
            forceType: filter.user && alwaysApp ? 'app' : undefined,
            query: createDropsEntitlementQuery(filter, alwaysApp)
        }, this._client, data => new HelixDropsEntitlement(data, this._client));
    }
    /**
     * Gets the drops entitlements for the given IDs.
     *
     * @beta
     *
     * @param ids The IDs to fetch.
     */
    async getDropsEntitlementsByIds(ids) {
        const response = await this._client.callApi({
            type: 'helix',
            url: 'entitlements/drops',
            query: {
                id: ids
            }
        });
        return response.data.map(data => new HelixDropsEntitlement(data, this._client));
    }
    /**
     * Gets the drops entitlement for the given ID.
     *
     * @beta
     *
     * @param id The ID to fetch.
     */
    async getDropsEntitlementById(id) {
        var _a;
        const result = await this.getDropsEntitlementsByIds([id]);
        return (_a = result[0]) !== null && _a !== void 0 ? _a : null;
    }
    /**
     * Updates the status of a list of drops entitlements.
     *
     * Returns a map that associates each given ID with its update status.
     *
     * @beta
     *
     * @param ids The IDs of the entitlements.
     * @param fulfillmentStatus The fulfillment status to set the entitlements to.
     */
    async updateDropsEntitlements(ids, fulfillmentStatus) {
        const response = await this._client.callApi({
            type: 'helix',
            url: 'entitlements/drops',
            method: 'PATCH',
            jsonBody: createDropsEntitlementUpdateBody(ids, fulfillmentStatus)
        });
        return new Map(response.data.flatMap(entry => entry.ids.map(id => [id, entry.status])));
    }
};
HelixEntitlementApi = __decorate([
    rtfm('api', 'HelixEntitlementApi')
], HelixEntitlementApi);
export { HelixEntitlementApi };
