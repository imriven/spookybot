import { DataObject } from '@twurple/common';
import type { ApiClient } from '../../../ApiClient';
import { type HelixChannelData } from '../../../interfaces/helix/channel.external';
import type { HelixGame } from '../game/HelixGame';
import type { HelixUser } from '../user/HelixUser';
/**
 * A Twitch channel.
 */
export declare class HelixChannel extends DataObject<HelixChannelData> {
    private readonly _client;
    /** @private */
    constructor(data: HelixChannelData, client: ApiClient);
    /**
     * The ID of the channel.
     */
    get id(): string;
    /**
     * The name of the channel.
     */
    get name(): string;
    /**
     * The display name of the channel.
     */
    get displayName(): string;
    /**
     * Retrieves more information about the broadcaster of the channel.
     */
    getBroadcaster(): Promise<HelixUser>;
    /**
     * The language of the channel.
     */
    get language(): string;
    /**
     * The ID of the game currently played on the channel.
     */
    get gameId(): string;
    /**
     * The name of the game currently played on the channel.
     */
    get gameName(): string;
    /**
     * Retrieves information about the game that is being played on the stream.
     */
    getGame(): Promise<HelixGame>;
    /**
     * The title of the channel.
     */
    get title(): string;
    /**
     * The stream delay of the channel, in seconds.
     *
     * If you didn't request this with broadcaster access, this is always zero.
     */
    get delay(): number;
    /**
     * The tags applied to the channel.
     */
    get tags(): string[];
}
//# sourceMappingURL=HelixChannel.d.ts.map