"use strict";
var HelixStreamApi_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixStreamApi = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const api_call_1 = require("@twurple/api-call");
const common_1 = require("@twurple/common");
const StreamNotLiveError_1 = require("../../../errors/StreamNotLiveError");
const generic_external_1 = require("../../../interfaces/helix/generic.external");
const stream_external_1 = require("../../../interfaces/helix/stream.external");
const BaseApi_1 = require("../../BaseApi");
const HelixPaginatedRequest_1 = require("../HelixPaginatedRequest");
const HelixPaginatedResult_1 = require("../HelixPaginatedResult");
const HelixPagination_1 = require("../HelixPagination");
const HelixTag_1 = require("../tag/HelixTag");
const HelixStream_1 = require("./HelixStream");
const HelixStreamMarker_1 = require("./HelixStreamMarker");
const HelixStreamMarkerWithVideo_1 = require("./HelixStreamMarkerWithVideo");
/**
 * The Helix API methods that deal with streams.
 *
 * Can be accessed using `client.streams` on an {@link ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const stream = await api.streams.getStreamByUserId('125328655');
 * ```
 *
 * @meta category helix
 * @meta categorizedTitle Streams
 */
let HelixStreamApi = HelixStreamApi_1 = class HelixStreamApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves a list of streams.
     *
     * @param filter
     * @expandParams
     */
    async getStreams(filter = {}) {
        const result = await this._client.callApi({
            url: 'streams',
            type: 'helix',
            query: {
                ...(0, stream_external_1.createStreamQuery)(filter),
                ...(0, HelixPagination_1.createPaginationQuery)(filter)
            }
        });
        return (0, HelixPaginatedResult_1.createPaginatedResult)(result, HelixStream_1.HelixStream, this._client);
    }
    /**
     * Creates a paginator for streams.
     *
     * @param filter
     * @expandParams
     */
    getStreamsPaginated(filter = {}) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'streams',
            query: (0, stream_external_1.createStreamQuery)(filter)
        }, this._client, data => new HelixStream_1.HelixStream(data, this._client));
    }
    /**
     * Retrieves the current streams for the given usernames.
     *
     * @param users The username to retrieve the streams for.
     */
    async getStreamsByUserNames(users) {
        const result = await this.getStreams({ userName: users.map(common_1.extractUserName) });
        return result.data;
    }
    /**
     * Retrieves the current stream for the given username.
     *
     * @param user The username to retrieve the stream for.
     */
    async getStreamByUserName(user) {
        var _a;
        const result = await this.getStreamsByUserNames([user]);
        return (_a = result[0]) !== null && _a !== void 0 ? _a : null;
    }
    /**
     * Retrieves the current streams for the given user IDs.
     *
     * @param users The user IDs to retrieve the streams for.
     */
    async getStreamsByUserIds(users) {
        const result = await this.getStreams({ userId: users.map(common_1.extractUserId) });
        return result.data;
    }
    /**
     * Retrieves the current stream for the given user ID.
     *
     * @param user The user ID to retrieve the stream for.
     */
    async getStreamByUserId(user) {
        var _a;
        const result = await this.getStreamsByUserIds([user]);
        return (_a = result[0]) !== null && _a !== void 0 ? _a : null;
    }
    /**
     * Retrieves a list of all stream markers for an user.
     *
     * @param user The user to list the stream markers for.
     * @param pagination
     *
     * @expandParams
     */
    async getStreamMarkersForUser(user, pagination) {
        return await this._getStreamMarkers('user_id', (0, common_1.extractUserId)(user), pagination);
    }
    /**
     * Creates a paginator for all stream markers for an user.
     *
     * @param user The user to list the stream markers for.
     */
    getStreamMarkersForUserPaginated(user) {
        return this._getStreamMarkersPaginated('user_id', (0, common_1.extractUserId)(user));
    }
    /**
     * Retrieves a list of all stream markers for a video.
     *
     * @param videoId The video to list the stream markers for.
     * @param pagination
     *
     * @expandParams
     */
    async getStreamMarkersForVideo(videoId, pagination) {
        return await this._getStreamMarkers('video_id', videoId, pagination);
    }
    /**
     * Creates a paginator for all stream markers for a video.
     *
     * @param videoId The video to list the stream markers for.
     */
    getStreamMarkersForVideoPaginated(videoId) {
        return this._getStreamMarkersPaginated('video_id', videoId);
    }
    /**
     * Creates a new stream marker.
     *
     * Only works while the specified user's stream is live.
     *
     * @param broadcaster The broadcaster to create a stream marker for.
     * @param description The description of the marker.
     */
    async createStreamMarker(broadcaster, description) {
        try {
            const result = await this._client.callApi({
                url: 'streams/markers',
                method: 'POST',
                type: 'helix',
                scope: 'channel:manage:broadcast',
                jsonBody: (0, stream_external_1.createStreamMarkerBody)(broadcaster, description)
            });
            return new HelixStreamMarker_1.HelixStreamMarker(result.data[0], this._client);
        }
        catch (e) {
            if (e instanceof api_call_1.HttpStatusCodeError && e.statusCode === 404) {
                throw new StreamNotLiveError_1.StreamNotLiveError({ cause: e });
            }
            throw e;
        }
    }
    /**
     * Retrieves the tags of a stream.
     *
     * @param broadcaster The broadcaster of the stream.
     *
     * @deprecated
     */
    async getStreamTags(broadcaster) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'streams/tags',
            query: (0, api_call_1.createBroadcasterQuery)(broadcaster)
        });
        return result.data.map(data => new HelixTag_1.HelixTag(data));
    }
    /**
     * Replaces the tags of a stream.
     *
     * @param broadcaster The broadcaster of the stream.
     * @param tagIds The tags to set. If not given, removes all tags.
     *
     * @deprecated
     */
    async replaceStreamTags(broadcaster, tagIds) {
        await this._client.callApi({
            type: 'helix',
            url: 'streams/tags',
            scope: 'channel:manage:broadcast',
            method: 'PUT',
            query: (0, api_call_1.createBroadcasterQuery)(broadcaster),
            jsonBody: (0, generic_external_1.createSingleKeyQuery)('tag_ids', tagIds)
        });
    }
    /**
     * Retrieves the stream key of a stream.
     *
     * @param broadcaster The broadcaster to retrieve the stream key for.
     */
    async getStreamKey(broadcaster) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'streams/key',
            scope: 'channel:read:stream_key',
            query: (0, api_call_1.createBroadcasterQuery)(broadcaster)
        });
        return result.data[0].stream_key;
    }
    /**
     * Retrieves the streams that are currently live and are followed by the given user.
     *
     * @param user The user to check followed streams for.
     * @param pagination
     *
     * @expandParams
     */
    async getFollowedStreams(user, pagination) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'streams/followed',
            scope: 'user:read:follows',
            query: {
                ...(0, generic_external_1.createSingleKeyQuery)('user_id', (0, common_1.extractUserId)(user)),
                ...(0, HelixPagination_1.createPaginationQuery)(pagination)
            }
        });
        return (0, HelixPaginatedResult_1.createPaginatedResult)(result, HelixStream_1.HelixStream, this._client);
    }
    /**
     * Creates a paginator for the streams that are currently live and are followed by the given user.
     *
     * @param user The user to check followed streams for.
     */
    getFollowedStreamsPaginated(user) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'streams/followed',
            scope: 'user:read:follows',
            query: (0, generic_external_1.createSingleKeyQuery)('user_id', (0, common_1.extractUserId)(user))
        }, this._client, data => new HelixStream_1.HelixStream(data, this._client));
    }
    async _getStreamMarkers(queryType, id, pagination) {
        var _a;
        const result = await this._client.callApi({
            url: 'streams/markers',
            type: 'helix',
            query: {
                [queryType]: id,
                ...(0, HelixPagination_1.createPaginationQuery)(pagination)
            },
            scope: 'user:read:broadcast'
        });
        return {
            data: (0, shared_utils_1.flatten)(result.data.map(HelixStreamApi_1._mapGetStreamMarkersResult.bind(this._client))),
            cursor: (_a = result.pagination) === null || _a === void 0 ? void 0 : _a.cursor
        };
    }
    _getStreamMarkersPaginated(queryType, id) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'streams/markers',
            query: {
                [queryType]: id
            },
            scope: 'user:read:broadcast'
        }, this._client, HelixStreamApi_1._mapGetStreamMarkersResult.bind(this._client));
    }
    static _mapGetStreamMarkersResult(data) {
        return data.videos.reduce((result, video) => [
            ...result,
            ...video.markers.map(marker => new HelixStreamMarkerWithVideo_1.HelixStreamMarkerWithVideo(marker, video.video_id, this))
        ], []);
    }
};
HelixStreamApi = HelixStreamApi_1 = tslib_1.__decorate([
    (0, common_1.rtfm)('api', 'HelixStreamApi')
], HelixStreamApi);
exports.HelixStreamApi = HelixStreamApi;
