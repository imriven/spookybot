import type { ConstructedType } from '@d-fischer/shared-utils';
import type { HelixPaginatedResponse, HelixPaginatedResponseWithTotal } from '@twurple/api-call';
import { type BaseApiClient } from '../../client/BaseApiClient';
/**
 * A result coming from a Helix resource that is paginated using a cursor.
 */
export interface HelixPaginatedResult<T> {
    /**
     * The returned data.
     */
    readonly data: T[];
    /**
     * A cursor for traversing more results.
     */
    cursor?: string;
}
/**
 * A result coming from a Helix resource that is paginated using a cursor, also including a total number of items.
 */
export interface HelixPaginatedResultWithTotal<T> {
    /**
     * The returned data.
     */
    readonly data: T[];
    /**
     * A cursor for traversing more results.
     */
    cursor: string;
    /**
     * The total number of items.
     */
    total: number;
}
/** @private */ export declare function createPaginatedResult<I, O extends new (data: I, client: BaseApiClient) => ConstructedType<O>>(response: HelixPaginatedResponse<I>, type: O, client: BaseApiClient): HelixPaginatedResult<ConstructedType<O>>;
/** @private */ export declare function createPaginatedResult<I, O extends new (data: I) => ConstructedType<O>>(response: HelixPaginatedResponse<I>, type: O): HelixPaginatedResult<ConstructedType<O>>;
/** @private */ export declare function createPaginatedResultWithTotal<I, O extends new (data: I, client: BaseApiClient) => ConstructedType<O>>(response: HelixPaginatedResponseWithTotal<I>, type: O, client: BaseApiClient): HelixPaginatedResultWithTotal<ConstructedType<O>>;
/** @private */ export declare function createPaginatedResultWithTotal<I, O extends new (data: I) => ConstructedType<O>>(response: HelixPaginatedResponseWithTotal<I>, type: O): HelixPaginatedResultWithTotal<ConstructedType<O>>;
//# sourceMappingURL=HelixPaginatedResult.d.ts.map