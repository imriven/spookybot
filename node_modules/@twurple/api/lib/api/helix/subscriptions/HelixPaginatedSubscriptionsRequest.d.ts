import { type UserIdResolvable } from '@twurple/common';
import { type BaseApiClient } from '../../../client/BaseApiClient';
import { type HelixPaginatedSubscriptionsResponse, type HelixSubscriptionData } from '../../../interfaces/helix/subscription.external';
import { HelixPaginatedRequestWithTotal } from '../HelixPaginatedRequestWithTotal';
import { HelixSubscription } from './HelixSubscription';
/**
 * A special case of {@link HelixPaginatedRequestWithTotal}
 * with support for fetching the total sub points of a broadcaster.
 *
 * @inheritDoc
 */
export declare class HelixPaginatedSubscriptionsRequest extends HelixPaginatedRequestWithTotal<HelixSubscriptionData, HelixSubscription> {
    /** @private */
    protected _currentData?: HelixPaginatedSubscriptionsResponse;
    /** @private */
    constructor(broadcaster: UserIdResolvable, client: BaseApiClient);
    /**
     * Retrieves and returns the total sub points of the broadcaster.
     */
    getPoints(): Promise<number>;
}
//# sourceMappingURL=HelixPaginatedSubscriptionsRequest.d.ts.map