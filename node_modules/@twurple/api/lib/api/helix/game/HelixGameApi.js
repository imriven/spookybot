"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixGameApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const HelixPaginatedRequest_1 = require("../HelixPaginatedRequest");
const HelixPaginatedResult_1 = require("../HelixPaginatedResult");
const HelixPagination_1 = require("../HelixPagination");
const HelixGame_1 = require("./HelixGame");
/**
 * The Helix API methods that deal with games.
 *
 * Can be accessed using `client.games` on an {@link ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const game = await api.games.getGameByName('Hearthstone');
 * ```
 *
 * @meta category helix
 * @meta categorizedTitle Games
 */
let HelixGameApi = class HelixGameApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves the game data for the given list of game IDs.
     *
     * @param ids The game IDs you want to look up.
     */
    async getGamesByIds(ids) {
        return await this._getGames('id', ids);
    }
    /**
     * Retrieves the game data for the given list of game names.
     *
     * @param names The game names you want to look up.
     */
    async getGamesByNames(names) {
        return await this._getGames('name', names);
    }
    /**
     * Retrieves the game data for the given list of IGDB IDs.
     *
     * @param igdbIds The IGDB IDs you want to look up.
     */
    async getGamesByIgdbIds(igdbIds) {
        return await this._getGames('igdb_id', igdbIds);
    }
    /**
     * Retrieves the game data for the given game ID.
     *
     * @param id The game ID you want to look up.
     */
    async getGameById(id) {
        var _a;
        const games = await this._getGames('id', [id]);
        return (_a = games[0]) !== null && _a !== void 0 ? _a : null;
    }
    /**
     * Retrieves the game data for the given game name.
     *
     * @param name The game name you want to look up.
     */
    async getGameByName(name) {
        var _a;
        const games = await this._getGames('name', [name]);
        return (_a = games[0]) !== null && _a !== void 0 ? _a : null;
    }
    /**
     * Retrieves the game data for the given IGDB ID.
     *
     * @param igdbId The IGDB ID you want to look up.
     */
    async getGameByIgdbId(igdbId) {
        var _a;
        const games = await this._getGames('igdb_id', [igdbId]);
        return (_a = games[0]) !== null && _a !== void 0 ? _a : null;
    }
    /**
     * Retrieves a list of the most viewed games at the moment.
     *
     * @param pagination
     *
     * @expandParams
     */
    async getTopGames(pagination) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'games/top',
            query: (0, HelixPagination_1.createPaginationQuery)(pagination)
        });
        return (0, HelixPaginatedResult_1.createPaginatedResult)(result, HelixGame_1.HelixGame, this._client);
    }
    /**
     * Creates a paginator for the most viewed games at the moment.
     */
    getTopGamesPaginated() {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'games/top'
        }, this._client, data => new HelixGame_1.HelixGame(data, this._client));
    }
    async _getGames(filterType, filterValues) {
        if (!filterValues.length) {
            return [];
        }
        const result = await this._client.callApi({
            type: 'helix',
            url: 'games',
            query: {
                [filterType]: filterValues
            }
        });
        return result.data.map(entry => new HelixGame_1.HelixGame(entry, this._client));
    }
};
HelixGameApi = tslib_1.__decorate([
    (0, common_1.rtfm)('api', 'HelixGameApi')
], HelixGameApi);
exports.HelixGameApi = HelixGameApi;
