import { type UserIdResolvable } from '@twurple/common';
import { type HelixCreatePredictionData } from './prediction.input';
/**
 * The different statuses a prediction can have.
 */
export declare type HelixPredictionStatus = 'ACTIVE' | 'RESOLVED' | 'CANCELED' | 'LOCKED';
export declare type HelixPredictionOutcomeColor = 'BLUE' | 'PINK';
/** @private */
export interface HelixPredictorData {
    id: string;
    name: string;
    login: string;
    channel_points_used: number;
    channel_points_won: number | null;
}
/** @private */
export interface HelixPredictionOutcomeData {
    id: string;
    title: string;
    users: number;
    channel_points: number;
    top_predictors: HelixPredictorData[] | null;
    color: HelixPredictionOutcomeColor;
}
/** @private */
export interface HelixPredictionData {
    id: string;
    broadcaster_id: string;
    broadcaster_login: string;
    broadcaster_name: string;
    title: string;
    winning_outcome_id: string | null;
    outcomes: HelixPredictionOutcomeData[];
    prediction_window: number;
    status: HelixPredictionStatus;
    created_at: string;
    ended_at: string;
    locked_at: string;
}
/** @private */
export declare function createPredictionBody(broadcaster: UserIdResolvable, data: HelixCreatePredictionData): {
    broadcaster_id: string;
    title: string;
    outcomes: {
        title: string;
    }[];
    prediction_window: number;
};
/** @private */
export declare function createEndPredictionBody(broadcaster: UserIdResolvable, id: string, status: HelixPredictionStatus, outcomeId?: string): {
    broadcaster_id: string;
    id: string;
    status: HelixPredictionStatus;
    winning_outcome_id: string | undefined;
};
//# sourceMappingURL=prediction.external.d.ts.map