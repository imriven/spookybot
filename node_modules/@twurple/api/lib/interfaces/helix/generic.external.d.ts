import { type UserIdResolvable } from '@twurple/common';
/** @private */
export interface HelixUserRelationData {
    user_id: string;
    user_login: string;
    user_name: string;
}
/** @private */
export interface HelixDateRangeData {
    started_at: string;
    ended_at: string;
}
/** @private */
export interface HelixEventData<T, EventType extends string = string> {
    id: string;
    event_type: EventType;
    event_timestamp: string;
    version: string;
    event_data: T;
}
/** @private */
export declare function createSingleKeyQuery(key: string, value: string | string[] | undefined): Record<string, string | string[] | undefined>;
/** @private */
export declare function createModeratorActionQuery(broadcaster: UserIdResolvable, moderator: UserIdResolvable): {
    broadcaster_id: string;
    moderator_id: string;
};
/** @private */
export declare function createGetByIdsQuery(broadcaster: UserIdResolvable, rewardIds: string[]): {
    broadcaster_id: string;
    id: string[];
};
/** @private */
export declare function createChannelUsersCheckQuery(broadcaster: UserIdResolvable, users: UserIdResolvable[]): {
    broadcaster_id: string;
    user_id: string[];
};
//# sourceMappingURL=generic.external.d.ts.map